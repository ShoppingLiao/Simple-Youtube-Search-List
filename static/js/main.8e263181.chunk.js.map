{"version":3,"sources":["Components/App/Styled.js","Components/Main/Styled.js","Components/Main/index.js","Components/Main/Main.js","Components/App/App.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Header","Content","Item","Footer","PageBtn","button","props","actived","Main","useState","searchKey","setSearchKey","pageData","setPageData","currentPage","setCurrentPage","a","axios","get","res","newPageData","page1","page2","page3","data","items","forEach","item","idx","push","type","placeholder","value","onChange","e","target","onClick","trim","length","fetchData","map","id","snippet","key","videoId","window","open","handleOpenVedio","src","thumbnails","high","url","alt","title","page","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAEO,IAAMA,EAAUC,IAAOC,IAAV,K,kkDCAb,IAAMF,EAAUC,IAAOC,IAAV,KAWPC,EAASF,IAAOC,IAAV,KA0BNE,EAAUH,IAAOC,IAAV,KAKPG,EAAOJ,IAAOC,IAAV,KAsBJI,EAASL,IAAOC,IAAV,KAKNK,EAAUN,IAAOO,OAAV,KACT,SAACC,GAAD,OAAYA,EAAMC,QAAU,OAAS,UAChC,SAACD,GAAD,OAAYA,EAAMC,QAAU,WAAa,iBCvE1CC,MCEA,WAAiB,IAAD,EACKC,mBAAS,IADd,mBACtBC,EADsB,KACXC,EADW,OAEGF,qBAFH,mBAEtBG,EAFsB,KAEZC,EAFY,OAGSJ,mBAAS,GAHlB,mBAGtBK,EAHsB,KAGTC,EAHS,iDAgB7B,8BAAAC,EAAA,4DAEc,0CAFd,SAGoBC,IAAMC,IAAN,oFADN,0CACM,2BACmFR,IAJvG,OAGQS,EAHR,OAOQC,EAAc,CAClBC,MAAO,GACPC,MAAO,GACPC,MAAO,IAETJ,EAAIK,KAAKC,MAAMC,SAAQ,SAACC,EAAMC,GACxBA,EAAM,GACRR,EAAYC,MAAMQ,KAAKF,GACdC,EAAM,GACfR,EAAYE,MAAMO,KAAKF,GAEvBP,EAAYG,MAAMM,KAAKF,MAI3Bd,EAAYO,GAtBd,4CAhB6B,sBA6C7B,OACE,kBAAC,EAAD,KACE,kBAACpB,EAAD,KACE,6BACE,2BACE8B,KAAK,OACLC,YAAY,iCACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAhDWF,EAgDkBE,EAAEC,OAAOH,WA/CxDrB,EAAaqB,GADf,IAA+BA,KAkDvB,4BAAQI,QA9ChB,WACkC,IAA5B1B,EAAU2B,OAAOC,QAVM,mCAa3BC,KA0CM,YAGJ,kBAACtC,EAAD,KACGW,GACCA,EAAS,OAAD,OAAQE,IAAe0B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAAP,OACjC,kBAACxC,EAAD,CAAMyC,IAAKF,EAAGG,QAASR,QAAS,kBApB1C,SAAyBK,GACvBI,OAAOC,KAAP,0CAA+CL,IAmBDM,CAAgBN,EAAGG,WACvD,yBAAKI,IAAKN,EAAQO,WAAWC,KAAKC,IAAKC,IAAI,SAC3C,6BAAMV,EAAQW,YAItB,kBAAClD,EAAD,KACGS,GACC,CAAC,EAAG,EAAG,GAAG4B,KAAI,SAACc,GAAD,OACZ,kBAAClD,EAAD,CACEuC,IAAG,eAAUW,GACblB,QAAS,kBAAMrB,EAAeuC,IAC9B/C,QAASO,IAAgBwC,GAExBA,SCnEAC,ICVAA,EDEf,WACE,OACE,kBAAC1D,EAAD,KACE,kBAAC,EAAD,QEKc2D,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e263181.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div``;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  border: 1px solid #ddd;\r\n  font-size: 0.5rem;\r\n  margin: 0.5rem 1rem;\r\n  padding: 1rem;\r\n  @media (max-width: 1024px) {\r\n    margin: 0 auto;\r\n    padding: 0.2rem;\r\n  }\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  background: #ff5956;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 3rem;\r\n  justify-content: center;\r\n\r\n  div {\r\n    border-bottom: 1px solid #fff;\r\n  }\r\n  input {\r\n    border: none;\r\n    color: #fff;\r\n    &::placeholder {\r\n      color: #fff;\r\n    }\r\n  }\r\n  button {\r\n    font-size: 0.5rem;\r\n    padding: 0 0.2rem;\r\n    height: 0.8rem;\r\n    line-height: 0.8rem;\r\n    color: #fff;\r\n    background: none;\r\n  }\r\n`;\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Item = styled.div`\r\n  margin: 0.2rem;\r\n  width: 20vw;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  @media (max-width: 1024px) {\r\n    width: 43vw;\r\n  }\r\n  img {\r\n    margin: 0 auto;\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n  div {\r\n    display: block;\r\n    font-size: 0.5rem;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const PageBtn = styled.button`\r\n  color: ${(props) => (props.actived ? '#fff' : '#666')};\r\n  background: ${(props) => (props.actived ? ' #ff5956' : 'transparent')};\r\n  border-radius: 100%;\r\n  height: 1rem;\r\n  width: 1rem;\r\n  margin: 0.2rem;\r\n`;\r\n","import Main from './Main';\r\n\r\nexport default Main;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Wrapper, Header, Content, Item, Footer, PageBtn } from './Styled';\r\n\r\nexport default function Main() {\r\n  const [searchKey, setSearchKey] = useState('');\r\n  const [pageData, setPageData] = useState();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  function handleSearchKeyChange(value) {\r\n    setSearchKey(value);\r\n  }\r\n\r\n  function handleSearch() {\r\n    if (searchKey.trim().length === 0) {\r\n      return;\r\n    }\r\n    fetchData();\r\n  }\r\n\r\n  async function fetchData() {\r\n    // const key = 'YOUR_API_KEY';\r\n    const key = 'AIzaSyDeuychew40nakWZWsvgFBi2ZxrcigzeRA';\r\n    const res = await axios.get(\r\n      `https://www.googleapis.com/youtube/v3/search?type=video&maxResults=30&key=${key}&part=snippet&q=${searchKey}`\r\n    );\r\n\r\n    const newPageData = {\r\n      page1: [],\r\n      page2: [],\r\n      page3: [],\r\n    };\r\n    res.data.items.forEach((item, idx) => {\r\n      if (idx < 10) {\r\n        newPageData.page1.push(item);\r\n      } else if (idx < 20) {\r\n        newPageData.page2.push(item);\r\n      } else {\r\n        newPageData.page3.push(item);\r\n      }\r\n    });\r\n\r\n    setPageData(newPageData);\r\n  }\r\n\r\n  function handleOpenVedio(id) {\r\n    window.open(`https://www.youtube.com/watch?v=${id}`);\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Header>\r\n        <div>\r\n          <input\r\n            type='text'\r\n            placeholder='輸入關鍵字'\r\n            value={searchKey}\r\n            onChange={(e) => handleSearchKeyChange(e.target.value)}\r\n          />\r\n          <button onClick={handleSearch}>Search</button>\r\n        </div>\r\n      </Header>\r\n      <Content>\r\n        {pageData &&\r\n          pageData[`page${currentPage}`].map(({ id, snippet }) => (\r\n            <Item key={id.videoId} onClick={() => handleOpenVedio(id.videoId)}>\r\n              <img src={snippet.thumbnails.high.url} alt='test' />\r\n              <div>{snippet.title}</div>\r\n            </Item>\r\n          ))}\r\n      </Content>\r\n      <Footer>\r\n        {pageData &&\r\n          [1, 2, 3].map((page) => (\r\n            <PageBtn\r\n              key={`page_${page}`}\r\n              onClick={() => setCurrentPage(page)}\r\n              actived={currentPage === page}\r\n            >\r\n              {page}\r\n            </PageBtn>\r\n          ))}\r\n      </Footer>\r\n    </Wrapper>\r\n  );\r\n}\r\n","import React from 'react';\nimport { Wrapper } from './Styled';\nimport Main from '../Main';\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Main />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}